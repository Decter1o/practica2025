var snippetsData = null;

tinymce.PluginManager.add('snippets', function(editor, url) {

	var openDialog = async function () {
		var s = editor.settings;
		var curLang = 'ru';
		var result = null;
		if('id' in s && typeof s.id == 'string' && s.id.length>0){
			let curElementData = document.querySelector('#' + s.id).dataset;
			if(isElemExists(curElementData) && typeof curElementData == 'object'){
				if('lang' in curElementData && typeof curElementData.lang == 'string' && (curElementData.lang=='ru' || curElementData.lang=='kk' || curElementData.lang=='en')){
					curLang = curElementData.lang;
				}
			}
		}
		if('objectsListRouter' in s && typeof s.objectsListRouter == 'string' && s.objectsListRouter.length>0){
			let url = s.objectsListRouter + '?object=snippets';
			let response = await fetch(url);
			let ds = await response.json();
			if(isElemExists(ds) && typeof ds == 'object' && Object.keys(ds).length>0 && 'data' in ds && typeof ds.data == 'object' && Object.keys(ds.data).length>0){
				snippetsData = ds.data;
				var options = getSnippetsList(snippetsData);
				result = {
					type: 'panel',
					items: [
						{
							type: 'selectbox',
							name: 'snippetsList',
							label: 'Выберите сниппет',
							enabled: true,
							size: 1,
							items: options,
							context: 'mode:design'
						}
					]
				};
			} else {
				result = {
					type: 'panel',
					items: [
						{
							type: 'htmlpanel', 
							html: '<p>Ответ сервиса данных пуст или имеет некорректный формат</p>'
						}
					]
				};
			}
		} else {
			result = {
				type: 'panel',
				items: [
					{
						type: 'htmlpanel', 
						html: '<p>Путь к источнику данных не указан или имеет некорректный формат</p>'
					}
				]
			};
		}

		return editor.windowManager.open({
			title: 'Вставка сниппета',
			body: result,
			buttons: [
				{
					type: 'submit',
					text: 'Save',
					primary: true
				},
				{
					type: 'cancel',
					text: 'Close'
				}
			],
			onSubmit: function (api) {
				var data = api.getData();
				var curValue = null;
				if('snippetsList' in data && typeof data.snippetsList == 'string' && data.snippetsList.length>0){
					let k = data.snippetsList;
					if(k in snippetsData && typeof snippetsData[k] == 'object' && Object.keys(snippetsData[k]).length>0){
						let n = snippetsData[k];
						if('content' in n && typeof n.content == 'object' && Object.keys(n.content).length>0){
							let c = n.content;
							if(curLang in c && typeof c[curLang] == 'string' && c[curLang].length>0){
								curValue = c[curLang];
							}
						}
						
					}
				}
				if(isElemExists(curValue) && typeof curValue == 'string' && curValue.length>0){
					editor.insertContent(curValue);
				} else {
					alert('Не удалось получить ожидаемое значение сниппета');
				}				
				api.close();
			}
		});
	};
	  
	// Add a button that opens a window
	editor.ui.registry.addButton('snippets', {
		icon: 'paste-text',
		tooltip: 'Insert snippet',
		onAction: function () {
			// Open window
			openDialog();
		}
	});

	// Adds a menu item, which can then be included in any menu via the menu/menubar configuration
	editor.ui.registry.addMenuItem('snippets', {
		icon: 'paste-text',
		tooltip: 'Insert snippet',
		onAction: function() {
			// Open window
			openDialog();
		}
	});

	return {
		getMetadata: function () {
			return  {
				name: "Snippets plugin",
				url: "http://exampleplugindocsurl.com"
			};
		}
	};

});

var getSnippetsList = function (data){
	let result = [];
	if(isElemExists(data) && typeof data == 'object' && Object.keys(data).length>0){
		for (key in data) {
			let vls = data[key];
			if(isElemExists(vls) && typeof vls == 'object' && Object.keys(vls).length>0){
				if('description' in vls && typeof vls.description == 'object' && Object.keys(vls.description).length>0){
					let d = vls.description;
					if('ru' in d && typeof d.ru == 'string' && d.ru.length>0){
						let a = {};
						a['value'] = key;
						a['text'] = d.ru;
						result.push(a);
					}
				}
			}
		}
	}
	return result;
}

function isElemExists(value) {
	if(typeof(value) != 'undefined' && value !== null) {
		return true;
	} else {
		return false;
	}
}