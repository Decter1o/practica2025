var shortcodesData = null;
var queryPath = null;
tinymce.PluginManager.add('shortcodes', function(editor, url) {

	

	var openDialog = async function () {
		var s = editor.settings;
		var curLang = 'ru';
		var result = null;
		if('id' in s && typeof s.id == 'string' && s.id.length>0){
			let curElementData = document.querySelector('#' + s.id).dataset;
			if(isElemExists(curElementData) && typeof curElementData == 'object'){
				if('lang' in curElementData && typeof curElementData.lang == 'string' && (curElementData.lang=='ru' || curElementData.lang=='kk' || curElementData.lang=='en')){
					curLang = curElementData.lang;
				}
			}
		}
		if('objectsListRouter' in s && typeof s.objectsListRouter == 'string' && s.objectsListRouter.length>0){
			queryPath = s.objectsListRouter;
			let url = queryPath + '?object=shortcodes';
			let response = await fetch(url);
			let ds = await response.json();
			if(isElemExists(ds) && typeof ds == 'object' && Object.keys(ds).length>0 && 'data' in ds && typeof ds.data == 'object' && Object.keys(ds.data).length>0){
				shortcodesData = ds.data;
				var options = getshortcodesList(shortcodesData);
				result = {
					type: 'panel',
					items: [
						{
							type: 'htmlpanel', 
							html: '<div class="ui form">' + 
										'<div class="field">' + 
											'<label>Шаблон страницы</label>' + 
											'<select id="shcName" class="ui fluid dropdown" onchange="loadShortcode(this)">' + 
												'<option value="0">Выберите шорткод</option>' + 
												options + 
											'</select>' + 
										'</div>' + 
										'<div id="shcFields"></div>' + 
									'</div>'
						}
					]
				};
			} else {
				result = {
					type: 'panel',
					items: [
						{
							type: 'htmlpanel', 
							html: '<p>Ответ сервиса данных пуст или имеет некорректный формат</p>'
						}
					]
				};
			}
		} else {
			result = {
				type: 'panel',
				items: [
					{
						type: 'htmlpanel', 
						html: '<p>Путь к источнику данных не указан или имеет некорректный формат</p>'
					}
				]
			};
		}

		return editor.windowManager.open({
			title: 'Вставка шорткода',
			body: result,
			buttons: [
				{
					type: 'submit',
					text: 'Save',
					primary: true
				},
				{
					type: 'cancel',
					text: 'Close'
				}
			],
			onSubmit: function (api) {
				var result = {};
				let mod = document.querySelector('#shcName').value;
				if(isElemExists(mod) && typeof mod == 'string' && mod.length>=2 && mod in shortcodesData && typeof shortcodesData[mod] == 'object'){
					result['module'] = mod;
					let elList = document.querySelectorAll('#shcFields .shcf-element');
					let options = {};
					for (let el of elList) {
						var d = el.dataset;
						if('name' in d && typeof d.name == 'string' && d.name.length>0 && 'type' in d && typeof d.type == 'string' && d.type.length>0){
							let val = el.value;
							if(isElemExists(val) && typeof val == 'string' && val.length>0){
								if(d.name == 'target'){
									result['target'] = val;
								} else {
									options[d.name] = val;
								}
							}
						}
					}
					if(Object.keys(options).length>0){
						result['options'] = options;
					}
				}
				if(Object.keys(result).length>0){
					let code = '<i class="shortcode">' + JSON.stringify(result) + '</i>';
					editor.insertContent(code);
				} else {
					alert('Не удалось сформировать тело шорткода');
				}
				api.close();
			}			
		});
	};
	  
	// Add a button that opens a window
	editor.ui.registry.addButton('shortcodes', {
		icon: 'template',
		tooltip: 'Insert shortcode',
		onAction: function () {
			// Open window
			openDialog();
		}
	});

	// Adds a menu item, which can then be included in any menu via the menu/menubar configuration
	editor.ui.registry.addMenuItem('shortcodes', {
		icon: 'template',
		tooltip: 'Insert shortcode',
		onAction: function() {
			// Open window
			openDialog();
		}
	});

	return {
		getMetadata: function () {
			return  {
				name: "shortcodes plugin",
				url: "http://exampleplugindocsurl.com"
			};
		}
	};

});

function getshortcodesList(data){
	let result = '';
	if(isElemExists(data) && typeof data == 'object' && Object.keys(data).length>0){
		for (key in data) {
			let vls = data[key];
			if(isElemExists(vls) && typeof vls == 'object' && Object.keys(vls).length>0){
				if('description' in vls && typeof vls.description == 'object' && Object.keys(vls.description).length>0){
					let d = vls.description;
					if('ru' in d && typeof d.ru == 'string' && d.ru.length>0){
						result = result + '<option value="' + key + '">' + d.ru + '</option>';
					}
				}
			}
		}
	}
	return result;
}

async function loadShortcode(e){
	let shcContent = '';
	let k = e.value;
	if(isElemExists(k) && typeof k == 'string' && k.length>=2){
		if(k in shortcodesData && typeof shortcodesData[k] == 'object' && Object.keys(shortcodesData[k]).length>0){
			let n = shortcodesData[k];
			if('content' in n && typeof n.content == 'object' && Object.keys(n.content).length>0){
				let c = n.content;
				let refs = null;
				if('collections' in c && typeof c.collections == 'object' && Object.keys(c.collections).length>0){
					refs = c.collections;
				}
				if('fields' in c && typeof c.fields == 'object' && Object.keys(c.fields).length>0){
					let f = c.fields;
					let list = {};
					for (key in f) {
						let cont = await drawFormElement(key, f[key], refs);
						if(isElemExists(cont) && typeof cont == 'string' && cont.length>4){
							list[key] = cont;
						}
					}
					if(isElemExists(list) && typeof list == 'object' && Object.keys(list).length>0){
						if('view' in c && typeof c.view == 'object' && c.view.length>0){
							let o = c.view;
							for (var i = 0; i < o.length; i++) {
								let b = o[i];
								if(isElemExists(b) && typeof b == 'object' && b.length>0 && b.length<=2){
									if(b.length==1){
										let h = b[0];
										if(h in list && typeof list[h] == 'string' && list[h].length>0){
											shcContent = shcContent + list[h];
										}
									} else {
										shcContent = shcContent + '<div class="two fields">';
										for (var ii = 0; ii < o.length; ii++) {
											let h = b[ii];
											if(h in list && typeof list[h] == 'string' && list[h].length>0){
												shcContent = shcContent + list[h];
											}
										}
										shcContent = shcContent + '</div>';
									}
								}
							}
						} else {
							for (el in list) {
								shcContent = shcContent + list[el];
							}
						}
					}
				}
			}					
		}
	}
	document.querySelector('#shcFields').innerHTML = shcContent;
}

function isElemExists(value) {
	if(typeof(value) != 'undefined' && value !== null) {
		return true;
	} else {
		return false;
	}
}

async function drawFormElement(key, data, refs=null){
	console.log(data)
	let code = '';
	if(isElemExists(key) && typeof key == 'string' && key.length>=2){
		if(isElemExists(data) && typeof data == 'object' && Object.keys(data).length>0 && isFieldData(data)){
			let flType = data.type;
			let flName = data.title['ru'];
			switch(flType){
				case 'string':
					code = '<div class="field">' + 
									'<label>' + flName + '</label>' + 
									'<input type="text" id="shcf_' + key + '" class="shcf-element" data-type="string" data-name="' + key + '">' + 
								'</div>'
				break;
				case 'number':
					code = '<div class="field">' + 
									'<label>' + flName + '</label>' + 
									'<input type="number" id="shcf_' + key + '" class="shcf-element" data-type="number" data-name="' + key + '">' + 
								'</div>'
				break;
				case 'reference':
					if('source' in data && typeof data.source == 'string' && data.source.length>0 && 'alias' in data && typeof data.alias == 'string' && data.alias.length>0){
						let flSource = data.source;
						let flAlias = data.alias;
						switch(flSource){
							case 'system':
								if(isElemExists(queryPath) && typeof queryPath == 'string' && queryPath.length>0){
									let url = queryPath + '?object=collections&source=' + flSource + '&target=' + flAlias;
									let response = await fetch(url);
									let ds = await response.json();
									if(isElemExists(ds) && typeof ds == 'object' && Object.keys(ds).length>0 && 'data' in ds && typeof ds.data == 'object' && Object.keys(ds.data).length>0){
										let refData = ds.data;
										var options = getRefOptions(refData);
										code = '<div class="field">' + 
														'<label>' + flName + '</label>' + 
														'<select id="shcf_' + key + '" class="ui fluid dropdown shcf-element" data-type="reference" data-name="' + key + '">' + options + '</select>' + 
													'</div>'
									}
								}
							break;
							case 'menu':
								if(isElemExists(queryPath) && typeof queryPath == 'string' && queryPath.length>0){
									let url = queryPath + '?object=collections&source=' + flSource + '&target=' + flAlias;
									let response = await fetch(url);
									let ds = await response.json();
									if(isElemExists(ds) && typeof ds == 'object' && Object.keys(ds).length>0 && 'data' in ds && typeof ds.data == 'object' && Object.keys(ds.data).length>0){
										let refData = ds.data;
										var options = getRefArray(refData);
										code = '<div class="field">' + 
														'<label>' + flName + '</label>' + 
														'<select id="shcf_' + key + '" class="ui fluid dropdown shcf-element" data-type="reference" data-name="' + key + '">' + options + '</select>' + 
													'</div>'
									}
								}
							break;
							case 'local':
								if(isElemExists(refs) && typeof refs == 'object' && Object.keys(refs).length>0){
									if(flAlias in refs && typeof refs[flAlias] == 'object' && Object.keys(refs[flAlias]).length>0){
										let refData = refs[flAlias];
										var options = getRefOptions(refData);
										code = '<div class="field">' + 
														'<label>' + flName + '</label>' + 
														'<select id="shcf_' + key + '" class="ui fluid dropdown shcf-element" data-type="reference" data-name="' + key + '">' + options + '</select>' + 
													'</div>'
									}
								}
							break;
						}
					}
				break;
			}			
		}
	}
	return code;
}

function isFieldData(data){
	result = false;
	if(isElemExists(data) && typeof data == 'object' && Object.keys(data).length>0){
		if('title' in data && typeof data.title == 'object' && Object.keys(data.title).length>0){
			let n = data.title;
			if('ru' in n && typeof n['ru'] == 'string' && n['ru'].length>0){
				if('type' in data && typeof data.type == 'string' && data.type.length>0){
					result = true;
				}
			}
		}
	}
	return result;
}

function getRefOptions(data){
	let result = '';
	if(isElemExists(data) && typeof data == 'object' && Object.keys(data).length>0){
		for (key in data) {
			let val = data[key];
			if(isElemExists(val) && typeof val == 'string' && val.length>0){
				result = result + '<option value="' + key + '">' + val + '</option>';
			}
		}
	}
	return result;
}

function getRefArray(data){
	let result = '';
	if(isElemExists(data) && typeof data == 'object' && data.length>0){
		for (var i = 0; i < data.length; i++) {
			let val = data[i];
			if(isElemExists(val) && typeof val == 'string' && val.length>0){
				result = result + '<option value="' + val + '">' + val + '</option>';
			}
		}
	}
	return result;
}